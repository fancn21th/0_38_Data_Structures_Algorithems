// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
//   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// 6, 16, 33

// const Even_Fibonacci = (range) => {
//   let current = 0, next = 1, tmp, sum = 0;
//   // let counter = 0;
//   while(next < range) {
//     if(next % 2 === 0) {
//       sum += next;
//     }
//     tmp = current + next;
//     current = next;
//     next = tmp;
//     // counter ++;
//   };
//   // console.log(counter);
//   return sum;
// };

// Every third Fibonacci number is even

// 2, 5, 11

// const Even_Fibonacci = (range) => {
//   let firstOddNumber = 1, secondOddNumber = 1, thirdEvenNumber = 2, sum = 0;
//   // let counter = 0;
//   while(thirdEvenNumber < range) {
//     sum += thirdEvenNumber;
//     firstOddNumber = secondOddNumber + thirdEvenNumber;
//     secondOddNumber = thirdEvenNumber + firstOddNumber;
//     thirdEvenNumber = firstOddNumber + secondOddNumber;
//     // counter++;
//   }
//   // console.log(counter);
//   return sum;
// };

// it is not hard to prove f(n) = 4 * f(n-3) + f(n-6)
// so f(n) = 4 * f(n-1) + f(n-2)

// 0, 3, 9

const Even_Fibonacci = (range) => {
  let firstEvenNumber = 2,
      secondEvenNumber = 8,
      thirdEvenNumber = 4 * secondEvenNumber + firstEvenNumber ,
      sum = firstEvenNumber + secondEvenNumber;
  let counter = 0;
  while(thirdEvenNumber < range) {
    sum += thirdEvenNumber;
    firstEvenNumber = secondEvenNumber;
    secondEvenNumber = thirdEvenNumber;
    thirdEvenNumber = 4 * secondEvenNumber + firstEvenNumber;
    counter++;
  }
  console.log(counter);
  return sum;
};

export default Even_Fibonacci;
